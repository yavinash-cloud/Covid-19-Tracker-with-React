{"version":3,"sources":["util.js","Map.js","Table.js","InfoBox.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","color","fillColor","radius","Math","sqrt","Popup","className","style","backgroundImage","flag","numeral","format","_id","prettyPrintStat","stat","Map","countries","zoom","TileLayer","url","attribution","Table","InfoBox","title","total","isRed","active","props","Card","onClick","CardContent","Typography","App","useState","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","useEffect","fetch","then","response","json","name","value","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dbc77c18.chunk.js","sourcesContent":["import { Circle, Popup } from 'react-leaflet'\r\nimport React from 'react'\r\nimport numeral from 'numeral'\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: '#CC1034',\r\n    // rgb:\"rgb(204,16,52)\",\r\n    // half_op:\"rgba(204,16,52,0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: '#7dd71d',\r\n    // rgb:'rgb(125,215,29,0.5)',\r\n    // half_op:'rgba(125,215,29,0.5)',\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: '#fb4443',\r\n    // rgb:'rgb(251,68,67)',\r\n    // half_op:'rgba(251,68,67,0.5)',\r\n    multiplier: 2000,\r\n  },\r\n}\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data]\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  })\r\n  return sortedData\r\n}\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      pathOptions={{color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex }}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div key={country._id} className='info-container'>\r\n          <div\r\n            className='info-flag'\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n\r\n          <div className='info-name'>{country.country}</div>\r\n          <div className='info-confirm'>\r\n            Cases:{numeral(country.cases).format('0,0')}\r\n          </div>\r\n          <div className='info-recovered'>\r\n            Recovered:{numeral(country.recovered).format('0,0')}\r\n          </div>\r\n          <div className='info-deaths'>\r\n            Deaths:{numeral(country.deaths).format('0,0')}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ))\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format('0.0a')}` : '+0'\r\n","import React from \"react\";\r\nimport './map.css'\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport {showDataOnMap} from './util';\r\nfunction Map({countries,casesType,center,zoom}) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n          <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='$copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n          {showDataOnMap(countries,casesType)}\r\n\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            \r\n        {countries.map(({country,cases})=>(\r\n          <ul key={country}>\r\n              <li>{country}</li>\r\n              <li><strong>{numeral(cases).format()}</strong></li>\r\n          </ul>  \r\n        ))}\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from 'react'\r\nimport './InfoBox.css'\r\nimport {Card,CardContent,Typography} from \"@material-ui/core\"\r\nfunction InfoBox({title,cases,total,isRed,active,...props}) {\r\n    return (\r\n        <Card\r\n        onClick={props.onClick}\r\n        className={`infoBox ${active &&'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\r\n            <CardContent>\r\n                <Typography className='infoBox_title' color='textSecondary'>\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox_cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n                    {cases}\r\n                </h2>\r\n                <Typography color='textSecondary'>{total}Total</Typography>\r\n            </CardContent>\r\n            \r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n} from '@material-ui/core'\r\nimport './App.css'\r\nimport Map from './Map'\r\nimport Table from './Table'\r\nimport InfoBox from './InfoBox'\r\nimport { sortData, prettyPrintStat } from './util'\r\nimport 'leaflet/dist/leaflet.css'\r\nimport 'font-awesome/css/font-awesome.min.css'\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = useState([])\r\n  const [country, setCountry] = useState('worldwide')\r\n  const [countryInfo, setCountryInfo] = useState({})\r\n  const [tableData, setTableData] = useState([])\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 })\r\n  const [mapZoom, setMapZoom] = useState(3)\r\n  const [mapCountries, setMapCountries] = useState([])\r\n  const [casesType, setCasesType] = useState('cases')\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('https://disease.sh/v3/covid-19/all')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data)\r\n      })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      await fetch('https://disease.sh/v3/covid-19/countries')\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }))\r\n          const sortedData = sortData(data)\r\n          setTableData(sortedData)\r\n          setMapCountries(data)\r\n          setCountries(countries)\r\n        })\r\n    }\r\n    getCountriesData()\r\n  }, [])\r\n\r\n  const onCountryChange = async (event) => {\r\n    const countryCode = event.target.value\r\n    setCountry(countryCode)\r\n    const url =\r\n      countryCode === 'worldwide'\r\n        ? 'https://disease.sh/v3/covid-19/all'\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountry(countryCode)\r\n        setCountryInfo(data)\r\n        setMapCenter(\r\n          countryCode === 'worldwide'\r\n            ? [data.countryInfo.lat, data.countryInfo.long]\r\n            : [34.80746, -40.4796]\r\n        )\r\n        setMapZoom(4)\r\n      })\r\n  }\r\n  // console.log(countryInfo);\r\n\r\n  return (\r\n    <div className='app'>\r\n    \r\n      <div className='app_left'>\r\n        <div className='app_header'>\r\n          <h1>\r\n            <em>COVID-19 TRACKER</em>\r\n          </h1>\r\n          <FormControl className='app_dropdown'>\r\n            <Select\r\n              variant='outlined'\r\n              onChange={onCountryChange}\r\n              value={country}\r\n            >\r\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\r\n              {countries.map((country) => (\r\n                <MenuItem key={country._id} value={country.value}>{country.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <div className='app_stats'>\r\n          <InfoBox\r\n            isRed={true}\r\n            active={casesType === 'cases'}\r\n            onClick={(e) => setCasesType('cases')}\r\n            title='Coronavirus cases'\r\n            total={prettyPrintStat(countryInfo.cases)}\r\n            cases={prettyPrintStat(countryInfo.todayCases)}\r\n          />\r\n          <InfoBox\r\n            isRed={false}\r\n            active={casesType === 'recovered'}\r\n            onClick={(e) => setCasesType('recovered')}\r\n            title='Recovered'\r\n            total={prettyPrintStat(countryInfo.recovered)}\r\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n          />\r\n          <InfoBox\r\n            isRed={true}\r\n            active={casesType === 'deaths'}\r\n            onClick={(e) => setCasesType('deaths')}\r\n            title='Deaths'\r\n            total={prettyPrintStat(countryInfo.deaths)}\r\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n          />\r\n        </div>\r\n\r\n        <Map\r\n          casesType={casesType}\r\n          countries={mapCountries}\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n        />\r\n      </div>\r\n      <Card className='app_right'>\r\n        <CardContent>\r\n          <h3>Live Content By Country </h3>\r\n          <Table countries={tableData} />\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}